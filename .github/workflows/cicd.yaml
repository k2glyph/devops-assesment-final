name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
    tags: [ "*" ] 
  pull_request:
    branches: [ "master" ]

jobs:
  test: # This is optional so build will not wait for test to complete
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: bdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test -d bdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 -U test -d bdb && break
            echo "Waiting for PostgreSQL..."
            sleep 3
          done

      - name: Run tests with coverage
        run: go test -v -cover ./...
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tag
        run: echo "IMAGE_TAG=$(date +%s)" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/transactionapi:${{ env.IMAGE_TAG }}

      - name: Store image tag as artifact
        run: echo "${{ env.IMAGE_TAG }}" > image-tag.txt

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image-tag.txt
          retention-days: 1  # Keep artifact for 1 day
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: .

      - name: Read image tag
        run: echo "IMAGE_TAG=$(cat image-tag.txt)" >> $GITHUB_ENV

      - name: Set up Kubectl
        uses: azure/setup-kubectl@vv4.0.0

      - name: Install Helm
        uses: azure/setup-helm@v3.5

      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@v1.6.0

      - name: Create kubeconfig file
        run: echo "${{ secrets.KUBECONFIG }}" > ${{ github.workspace }}/kubeconfig

      - name: Configure GPG Key
        run: |
          echo -n "$GPG_SIGNING_KEY" | gpg --import
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          cd helm/transaction
          
          # Just echoing command. As it will fail without kubconfig 

          echo "kubectl create namespace transaction -o yaml"
          echo "sops --decrypt secrets/transaction-secret.yaml | kubectl apply -n transaction -f -"          
          echo "sops --decrypt secrets/postgresql-secret.yaml | kubectl apply -n transaction -f -"


          echo "Application deployment in progress ..."

          echo "helm upgrade transaction -n transaction --install --set image.tage=${IMAGE_TAG} ."
          helm template . --set image.tage=${IMAGE_TAG}

          echo "Congratulations application deployed successfully."


